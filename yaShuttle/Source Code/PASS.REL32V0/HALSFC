#!/bin/bash
# This Linux/Mac script compiles a HAL/S program using the HAL/S-FC program,
# which is assumed to be in the PATH.  It has the following parameters, all
# optional except the first one:
#
#	The path to the HAL/S source-code file.
#
#	The comma-delimited PARM_STRING of HAL/S-FC options, quoted if it contains 
#	spaces.  For example, "SRN,LISTING2,X6,LIST,ADDRS,HALMAT,NOTABLES,DECK".
#       However, if a PARM_STRING contains spaces, you may find that you cannot
#       use parameter 5 (the TEST option)
#
#	"PFS" (default) or "BFS"
#
#       File extension for executables.  Defaults to blank, but should be .exe
#       for cross-compilations.
#
#       Defaults to blank.  If anything non-blank, then tries to perform tests
#       of the compilation.

HALS_FILE="$1"
TEST="$2"
PARM_STRING="$3"
TARGET="$4"
EXT="$5"

if [[ ! -f "$HALS_FILE" ]]
then
        echo ""
        echo This script compiles a HAL/S file to an AP-101S object-code file.
        echo ""
        echo "     HALSFC SOURCE.hal [ TEST [ PARMS [ TARGET [ EXT ]]]]"
        echo ""
        echo Parameters appear in the indicated order.  Missing parameters
        echo in the middle of the list should have \"\" used as place markers.
        echo The parameters are interpreted as follows:
        echo ""
        echo "     SOURCE.hal        The HAL/S source-code file."
        echo "     TEST              Perform all available validity tests."
        echo "     PARMS             Comma-separated list of compiler options."
        echo "     TARGET            Either PFS (default) or BFS."
        echo "     EXT               Either blank (default) or .exe (cross compilation)"
        echo ""
        exit 1
fi

PARM_LIST=${PARM_STRING//,/ }

if [[ "$TARGET" == "BFS" ]]
then
	PASS1=HALSFC-PASS1B$EXT
	FLO=HALSFC-FLO$EXT
	OPT=HALSFC-OPTB$EXT
	AUXP=HALSFC-AUXP$EXT
	PASS2=HALSFC-PASS2B$EXT
	PASS3=HALSFC-PASS3B$EXT
	PASS4=HALSFC-PASS4$EXT
	TEMPLIB=TEMPLIBB$EXT
	CARDS--pdso=3,cards,E
else
	PASS1=HALSFC-PASS1$EXT
	FLO=HALSFC-FLO$EXT
	OPT=HALSFC-OPT$EXT
	AUXP=HALSFC-AUXP$EXT
	PASS2=HALSFC-PASS2$EXT
	PASS3=HALSFC-PASS3$EXT
	PASS4=HALSFC-PASS4$EXT
	TEMPLIB=TEMPLIB
	CARDS=--ddo=3,cards.bin,E
fi

$PASS1 \
	--parm="$PARM_STRING" \
	--ddi=0,"$HALS_FILE" \
	--ddo=2,listing2.txt \
	--pdsi=4,$TEMPLIB,E \
	--pdsi=5,ERRORLIB \
	--pdsi=6,ACCESS  \
	--pdso=6,$TEMPLIB,E \
	--commono=COMMON0.out \
	--raf=B,7200,1,halmat.bin \
	--raf=B,1560,2,litfile.bin \
	--raf=B,3360,6,vmem.bin \
	>pass1.rpt
if [[ $? != 0 ]] ; then echo "Aborted after PASS1" ; exit 1 ; fi

IGNORE_LINES='(HAL/S|FREE STRING AREA|NUMBER OF FILE 6|PROCESSING RATE|CPU TIME FOR|TODAY IS|COMPOOL.*VERSION)'
if [[ "$TEST" != "" ]]
then
        echo ======================================================
        ( HAL_S_FC.py $PARM_LIST --hal="$HALS_FILE" >pass1p.rpt ) && \
        echo PASS1 cross-comparison test ... || exit 1
        egrep -v "$IGNORE_LINES" pass1.rpt >pass1A.rpt
        egrep -v "$IGNORE_LINES" pass1p.rpt >pass1pA.rpt
        diff -q -s pass1A.rpt pass1pA.rpt
        diff -s FILE1.bin halmat.bin
        if [[ "$PARM_LIST" == *LISTING2* ]]
        then
                diff -q -s LISTING2.txt listing2.txt
        fi
        echo ======================================================
fi

$FLO \
	--commoni=COMMON0.out \
	--commono=COMMON1.out \
	--raf=B,7200,1,halmat.bin \
	--raf=B,1560,2,litfile.bin \
	--raf=B,3360,6,vmem.bin \
	>flo.rpt
if [[ $? != 0 ]] ; then echo "Aborted after FLO" ; exit 1 ; fi

$OPT \
	--commoni=COMMON1.out \
	--commono=COMMON2.out \
	--raf=B,7200,1,halmat.bin \
	--raf=B,1560,2,litfile.bin \
	--raf=B,7200,4,optmat.bin \
	--raf=B,3360,6,vmem.bin \
	>opt.rpt
if [[ $? != 0 ]] ; then echo "Aborted after OPT" ; exit 1 ; fi

$AUXP \
	--commoni=COMMON2.out \
	--commono=COMMON3.out \
	--raf=B,7200,1,auxmat.bin \
	--raf=B,1560,2,litfile.bin \
	--raf=B,7200,4,optmat.bin \
	--raf=B,3360,6,vmem.bin \
	>auxp.rpt
if [[ $? != 0 ]] ; then echo "Aborted after AUXP" ; exit 1 ; fi

$PASS2 \
	$CARDS \
	--ddo=4,deck.bin,E \
	--pdsi=5,ERRORLIB \
	--ddo=7,extra.txt \
	--commoni=COMMON3.out \
	--commono=COMMON4.out \
	--raf=B,7200,1,auxmat.bin \
	--raf=B,1560,2,litfile.bin \
	--raf=B,1600,3,objcode.bin \
	--raf=B,7200,4,optmat.bin \
	--raf=B,3360,6,vmem.bin \
	>pass2.rpt
if [[ $? != 0 ]] ; then echo "Aborted after PASS2" ; exit 1 ; fi

# PASS3 and PASS4 aren't ready for use yet.

echo "Compilation successful!"
